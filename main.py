# =======================================================
# === üß± –ë–õ–û–ö 1: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ========
# =======================================================

import asyncio
import os
from datetime import datetime, timedelta
from pathlib import Path
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–¥—Ä–µ—Å–∞ –≤–µ–±—Ö—É–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = "/webhook"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏
Path("storage").mkdir(exist_ok=True)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def reminder_background_task():
    data_file = Path("storage/data.json")
    CHECK_INTERVAL = 60  # —Å–µ–∫
    while True:
        try:
            if not data_file.exists():
                await asyncio.sleep(CHECK_INTERVAL)
                continue
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            now_utc = datetime.now(ZoneInfo("UTC"))
            # —Ç—É—Ç –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥)
            print(f"üîÑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤ {now_utc}")
        except Exception as e:
            print(f"‚ö†Ô∏è reminder_background_task: {e}")
        await asyncio.sleep(CHECK_INTERVAL) =======================================================
# === üß± –ë–õ–û–ö 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ========
# =======================================================

bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())


# =======================================================
# === üß± –ë–õ–û–ö 3: –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==========
# =======================================================


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

@dp.message(Command("start"))
async def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")],
            [KeyboardButton(text="üî• –ì–∞–∑")],
            [KeyboardButton(text="üíß –í–æ–¥–∞")],
            [KeyboardButton(text="üìä –û–±—â–∏–π –¥–æ–ª–≥ / –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, —è –î–æ–º–æ–≤—ë–Ω–æ–∫ –ö—É–∑—è!\n\n"
        "–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ —Ç–≤–æ–µ–º —Å—É–Ω–¥—É–∫–µ —Å–æ —Å–∫–∞–∑–∫–∞–º–∏ ‚Äî              –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –∑–∞—à–µ–ª –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ –∑–∞–π–¥–∏ –≤ ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> –∏ —É—Å—Ç–∞–Ω–æ–≤–∏            —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏ —Å—É–º–º—É –¥–æ–ª–≥–∞ (–∏–ª–∏ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã).\n\n"
        "üßÆ –ê —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —á—Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 4: –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π ===
# =======================================================

@dp.message(Command("add"))
async def add_handler(message: Message):
    try:
        from datetime import datetime
        import json
        from pathlib import Path

        # –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /add –≤–æ–¥–∞ 23.7
        parts = message.text.strip().split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /add <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–∏–µ>")

        counter_type = parts[1].lower()
        value = float(parts[2])
        user_id = str(message.from_user.id)
        today = datetime.now().strftime("%Y-%m-%d")

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
        data_file = Path("storage/data.json")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if user_id not in data:
            data[user_id] = {}
        if today not in data[user_id]:
            data[user_id][today] = {}
        data[user_id][today][counter_type] = value

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {counter_type} = {value}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 5: –ú–µ–Ω—é ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =====
# =======================================================

@dp.message(lambda message: message.text == "‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
async def electricity_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 6: –ú–µ–Ω—é üíß –í–æ–¥–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ==============
# =======================================================

@dp.message(lambda message: message.text == "üíß –í–æ–¥–∞")
async def water_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–†–∞–∑–¥–µ–ª üíß –í–æ–¥–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 7: –ú–µ–Ω—é üî• –ì–∞–∑ ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===============
# =======================================================

@dp.message(lambda message: message.text == "üî• –ì–∞–∑")
async def gas_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≥–∞–∑)")],
            [KeyboardButton(text="üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≥–∞–∑)")],
            [KeyboardButton(text="üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≥–∞–∑)")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≥–∞–∑)")],
            [KeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≥–∞–∑)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–†–∞–∑–¥–µ–ª üî• –ì–∞–∑.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 8: üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç) =====
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π")
async def electricity_history(message: Message):
    await show_history(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–∫–í—Ç‚ãÖ—á")


# =======================================================
# === üß± –ë–õ–û–ö 9: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π ======
# =======================================================

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime
import json
from pathlib import Path

class ReadingState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


# =======================================================
# === üß± –ë–õ–û–ö 9.1: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ===
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def electricity_history_named(message: Message):
    await show_history(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–∫–í—Ç‚ãÖ—á")


# =======================================================
# === üß± –ë–õ–û–ö 9.2: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π üíß –í–æ–¥–∞ =============
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≤–æ–¥–∞)")
async def water_history(message: Message):
    await show_history(message, "–≤–æ–¥–∞", "–º¬≥")


# =======================================================
# === üß± –ë–õ–û–ö 9.3: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π üî• –ì–∞–∑ ==============
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≥–∞–∑)")
async def gas_history(message: Message):
    await show_history(message, "–≥–∞–∑", "–º¬≥")


# =======================================================
# === üß± –ë–õ–û–ö 10: –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ =======
# =======================================================

@dp.message(lambda message: message.text == "‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def start_electricity_reading(message: Message, state: FSMContext):
    await state.set_state(ReadingState.electricity)
    last = get_last_value(message.from_user.id, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    msg = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–∫–í—Ç‚ãÖ—á):"
    if last is not None:
        msg += f"\n_(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ: {last})_"
    await message.answer(msg, parse_mode="Markdown")

@dp.message(ReadingState.electricity)
async def save_electricity_reading(message: Message, state: FSMContext):
    await save_reading(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 11: –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π üíß –í–æ–¥—ã ================
# =======================================================

@dp.message(lambda message: message.text == "‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≤–æ–¥–∞)")
async def start_water_reading(message: Message, state: FSMContext):
    await state.set_state(ReadingState.water)
    last = get_last_value(message.from_user.id, "–≤–æ–¥–∞")
    msg = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –≤–æ–¥–µ (–º¬≥):"
    if last is not None:
        msg += f"\n_(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ: {last})_"
    await message.answer(msg, parse_mode="Markdown")

@dp.message(ReadingState.water)
async def save_water_reading(message: Message, state: FSMContext):
    await save_reading(message, state, "–≤–æ–¥–∞")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 12: –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π üî• –ì–∞–∑–∞ ================
# =======================================================

@dp.message(lambda message: message.text == "‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≥–∞–∑)")
async def start_gas_reading(message: Message, state: FSMContext):
    await state.set_state(ReadingState.gas)
    last = get_last_value(message.from_user.id, "–≥–∞–∑")
    msg = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –≥–∞–∑—É (–º¬≥):"
    if last is not None:
        msg += f"\n_(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ: {last})_"
    await message.answer(msg, parse_mode="Markdown")

@dp.message(ReadingState.gas)
async def save_gas_reading(message: Message, state: FSMContext):
    await save_reading(message, state, "–≥–∞–∑")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 13: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö =
# =======================================================

async def cleanup_old_records(user_id: str):
    data_file = Path("storage/data.json")
    if not data_file.exists():
        return

    try:
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)

        if user_id not in data:
            return

        user_data = data[user_id]
        settings = user_data.get("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        tariffs = user_data.get("—Ç–∞—Ä–∏—Ñ—ã", {})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ—ã

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
        entries = [(date, items) for date, items in user_data.items() 
                  if isinstance(items, dict) and date not in ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "—Ç–∞—Ä–∏—Ñ—ã"]]
        entries.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user_data = {
            "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏": settings,
            "—Ç–∞—Ä–∏—Ñ—ã": tariffs
        }

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –∑–∞–ø–∏—Å–µ–π
        for date, items in entries[:12]:
            new_user_data[date] = items

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data[user_id] = new_user_data

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 14: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π (NEW) ======
# =======================================================
#
# ‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ –æ–±–Ω—É–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
#   next_try / last_sent —É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã
#   –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.
#
async def save_reading(message: Message, state: FSMContext, counter_type: str):
    try:
        value = float(message.text.strip().replace(',', '.'))  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ¬´1,23¬ª
        user_id = str(message.from_user.id)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data_file = Path("storage/data.json")

        data = {}
        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)

        user_blob = data.setdefault(user_id, {})
        # ======= –ó–∞–ø–∏—Å—å –ø–æ–∫–∞–∑–∞–Ω–∏–π =======
        user_blob[now] = {}
        prev_value = get_last_value(user_id, counter_type) or 0
        user_blob[now][counter_type] = value
        usage = value - prev_value if prev_value else 0

        # ======= –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ =======
        tariff_key = f"{counter_type}_—Ç–∞—Ä–∏—Ñ"
        tariff = user_blob.get("—Ç–∞—Ä–∏—Ñ—ã", {}).get(tariff_key, 1.8)
        cost = usage * tariff
        user_blob[now].setdefault("–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", {})[counter_type] = cost

        # ======= –°–±—Ä–æ—Å —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =======
        settings = user_blob.setdefault("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {})
        cfg = settings.setdefault(f"{counter_type}_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", {})
        cfg.pop("next_try", None)
        cfg.pop("last_sent", None)

        # ======= –ß–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π =======
        await cleanup_old_records(user_id)

        # ======= –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ =======
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        units = {"—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "–∫–í—Ç‚ãÖ—á", "–≤–æ–¥–∞": "–º¬≥", "–≥–∞–∑": "–º¬≥"}
        await message.answer(
            f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {value}\n"
            f"üìä –†–∞—Å—Ö–æ–¥: {usage:.2f} {units.get(counter_type, '')} ‚Ä¢ "
            f"–°—É–º–º–∞: {cost:.2f} –≥—Ä–Ω"
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 15: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π ==========
# =======================================================

def get_last_value(user_id, counter_type):
    user_id = str(user_id)
    data_file = Path("storage/data.json")
    if data_file.exists():
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        if user_id in data:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π
            dates = sorted([d for d in data[user_id].keys() 
                          if isinstance(data[user_id][d], dict) and 
                          counter_type in data[user_id][d]], reverse=True)
            if dates:
                return data[user_id][dates[0]][counter_type]

            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
            if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
                initial_key = f"{counter_type}_–ø–æ–∫–∞–∑–∞–Ω–∏—è"
                if initial_key in data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
                    return data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][initial_key]
    return None


# =======================================================
# === üß± –ë–õ–û–ö 16: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã =====
# =======================================================

class PaymentState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


# =======================================================
# === üß± –ë–õ–û–ö 17: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ =====
# =======================================================

@dp.message(lambda message: message.text == "üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def start_electricity_payment(message: Message, state: FSMContext):
    await state.set_state(PaymentState.electricity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é (–≥—Ä–Ω):")

@dp.message(PaymentState.electricity)
async def save_electricity_payment(message: Message, state: FSMContext):
    await save_payment(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 18: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã üíß –í–æ–¥—ã ===============
# =======================================================

@dp.message(lambda message: message.text == "üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≤–æ–¥–∞)")
async def start_water_payment(message: Message, state: FSMContext):
    await state.set_state(PaymentState.water)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ –≤–æ–¥—É (–≥—Ä–Ω):")

@dp.message(PaymentState.water)
async def save_water_payment(message: Message, state: FSMContext):
    await save_payment(message, state, "–≤–æ–¥–∞")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 19: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã üî• –ì–∞–∑–∞ ===============
# =======================================================

@dp.message(lambda message: message.text == "üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≥–∞–∑)")
async def start_gas_payment(message: Message, state: FSMContext):
    await state.set_state(PaymentState.gas)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ –≥–∞–∑ (–≥—Ä–Ω):")

@dp.message(PaymentState.gas)
async def save_gas_payment(message: Message, state: FSMContext):
    await save_payment(message, state, "–≥–∞–∑")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 20: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã =======
# =======================================================

async def save_payment(message: Message, state: FSMContext, counter_type: str):
    try:
        amount = float(message.text.strip().replace(',', '.'))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π
        user_id = str(message.from_user.id)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        file_path = Path("storage/data.json")

        if file_path.exists():
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        if user_id not in data:
            data[user_id] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–ª–∞—Ç—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        data[user_id][now] = {
            f"{counter_type}_–æ–ø–ª–∞—Ç–∞": amount
        }

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        await cleanup_old_records(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        total = 0.0
        paid = 0.0
        initial_debt = 0.0

        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
            initial_debt = float(data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"].get(f"{counter_type}_–¥–æ–ª–≥", 0))

        for date in sorted(data[user_id].keys()):
            items = data[user_id][date]
            if isinstance(items, dict):
                if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and counter_type in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                    total += float(items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"][counter_type])
                payment_key = f"{counter_type}_–æ–ø–ª–∞—Ç–∞"
                if payment_key in items:
                    paid += float(items[payment_key])

        total += initial_debt
        remaining_debt = total - paid

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        message_text = [
            f"üí∏ –û–ø–ª–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {amount:.2f} –≥—Ä–Ω",
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {'+' if remaining_debt < 0 else ''}{abs(remaining_debt):.2f} –≥—Ä–Ω"
        ]

        if remaining_debt > 0:
            message_text.append("‚ùó –ï—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å")
        elif remaining_debt < 0:
            message_text.append("üí´ –ï—Å—Ç—å –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")
        else:
            message_text.append("‚úÖ –î–æ–ª–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω")

        await message.answer("\n".join(message_text))
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 21: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–∞ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è =======
# =======================================================

@dp.message(lambda message: message.text == "üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def view_debt_electricity(message: Message):
    await show_debt(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 22: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–∞ üíß –í–æ–¥–∞ ================
# =======================================================

@dp.message(lambda message: message.text == "üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≤–æ–¥–∞)")
async def view_debt_water(message: Message):
    await show_debt(message, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 23: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–∞ üî• –ì–∞–∑ =================
# =======================================================

@dp.message(lambda message: message.text == "üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≥–∞–∑)")
async def view_debt_gas(message: Message):
    await show_debt(message, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 23.1: –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–≥–æ –¥–æ–ª–≥–∞ / –ø–µ—Ä–µ–ø–ª–∞—Ç—ã ===
# =======================================================

@dp.message(lambda message: message.text == "üìä –û–±—â–∏–π –¥–æ–ª–≥ / –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")
async def view_total_balance(message: Message):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        if not data_file.exists():
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)

        if user_id not in data:
            await message.answer("üì≠ –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        resources = {
            "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è",
            "–≤–æ–¥–∞": "üíß –í–æ–¥–∞",
            "–≥–∞–∑": "üî• –ì–∞–∑"
        }

        lines = []
        total_balance = 0.0

        for key, label in resources.items():
            total = 0.0
            paid = 0.0
            initial_debt = 0.0

            user_data = data[user_id]

            if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in user_data:
                initial_debt = float(user_data["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"].get(f"{key}_–¥–æ–ª–≥", 0))

            for date, items in user_data.items():
                if isinstance(items, dict):
                    if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and key in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                        total += float(items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"][key])
                    payment_key = f"{key}_–æ–ø–ª–∞—Ç–∞"
                    if payment_key in items:
                        paid += float(items[payment_key])

            balance = initial_debt + total - paid
            total_balance += balance

            if balance > 0:
                lines.append(f"{label} ‚Äî –¥–æ–ª–≥: {balance:.2f} –≥—Ä–Ω ‚ùó")
            elif balance < 0:
                lines.append(f"{label} ‚Äî –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: {abs(balance):.2f} –≥—Ä–Ω üí´")
            else:
                lines.append(f"{label} ‚Äî –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ ‚úÖ")

        lines.append("")
        if total_balance > 0:
            lines.append(f"üßÆ –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º: <b>{total_balance:.2f} –≥—Ä–Ω</b> ‚ùó")
        elif total_balance < 0:
            lines.append(f"üßÆ –ò—Ç–æ–≥–æ–≤–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º: <b>{abs(total_balance):.2f} –≥—Ä–Ω</b> üí´")
        else:
            lines.append(f"üßÆ –í—Å—ë –æ–ø–ª–∞—á–µ–Ω–æ: <b>0.00 –≥—Ä–Ω</b> ‚úÖ")

        await message.answer("\n".join(lines))
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 24: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ–ª–≥–∞ ==========
# =======================================================

async def show_debt(message: Message, counter_type: str):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        total = 0.0
        paid = 0.0
        initial_debt = 0.0
        last_reading_val = None
        last_reading_date = None

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_id in data:
                if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
                    initial_debt = float(data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"].get(f"{counter_type}_–¥–æ–ª–≥", 0))

                for date_str in sorted(data[user_id].keys()):
                    items = data[user_id][date_str]
                    if isinstance(items, dict):
                        if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and counter_type in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                            total += float(items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"][counter_type])
                            if counter_type in items:
                                last_reading_val = float(items[counter_type])
                            last_reading_date = date_str

                        payment_key = f"{counter_type}_–æ–ø–ª–∞—Ç–∞"
                        if payment_key in items:
                            paid += float(items[payment_key])

        total += initial_debt
        debt = total - paid

        def fmt_date(d):
            try:
                return datetime.strptime(d, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
            except:
                try:
                    return datetime.strptime(d, "%Y-%m-%d").strftime("%d.%m.%Y")
                except:
                    return d or "-"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        units = {
            "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "–∫–í—Ç‚ãÖ—á",
            "–≤–æ–¥–∞": "–º¬≥",
            "–≥–∞–∑": "–º¬≥"
        }

        details = []

        usage_note = ""
        if last_reading_val and last_reading_date:
            unit = units.get(counter_type, "")
            usage_note = f" (–≤–∫–ª—é—á–∞—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–∫–∞–∑–∞–Ω–∏—è–º {last_reading_val} {unit} –æ—Ç {fmt_date(last_reading_date)})"

        details.append(f"üìâ <b>{counter_type.capitalize()}</b>:")
        if debt > 0:
            details.append(f"–ò—Ç–æ–≥–æ–≤—ã–π –¥–æ–ª–≥{usage_note}:\n<b>{debt:.2f} –≥—Ä–Ω</b>")
        elif debt < 0:
            details.append(f"–ò—Ç–æ–≥–æ–≤–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞{usage_note}:\n<b>{abs(debt):.2f} –≥—Ä–Ω</b>")
        else:
            details.append(f"üí∞ –í—Å—ë –æ–ø–ª–∞—á–µ–Ω–æ{usage_note}:\n<b>0.00 –≥—Ä–Ω</b>")

        await message.answer("\n".join(details))
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ–ª–≥–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 25: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ======
# =======================================================

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")],
            [KeyboardButton(text="üî• –ì–∞–∑")],
            [KeyboardButton(text="üíß –í–æ–¥–∞")],
            [KeyboardButton(text="üìä –û–±—â–∏–π –¥–æ–ª–≥ / –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

# ===========================================================
# === üß± –ë–õ–û–ö 26: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π ===
# ===========================================================

async def show_history(message: Message, counter_type: str, unit: str):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        entries = []
        initial_reading = None

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_id in data:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ
                if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
                    initial_key = f"{counter_type}_–ø–æ–∫–∞–∑–∞–Ω–∏—è"
                    if initial_key in data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
                        initial_reading = float(data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][initial_key])

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
                for date_str, items in data[user_id].items():
                    if isinstance(items, dict) and counter_type in items:
                        try:
                            dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                        except ValueError:
                            try:
                                dt = datetime.strptime(date_str, "%Y-%m-%d")
                            except ValueError:
                                continue
                        val = float(items[counter_type])
                        entries.append((dt, val))

        entries.sort()

        if entries:
            lines = []

            for i in range(len(entries)):
                dt, val = entries[i]
                if i == 0 and initial_reading is not None:
                    diff = val - initial_reading
                    lines.append(
                        f"{dt.strftime('%d/%m/%y %H:%M')} ‚Äî {val} {unit}\n"
                        f"‚îî‚îÄ –†–∞–∑–Ω–∏—Ü–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏: {diff:+.2f} {unit}"
                    )
                else:
                    prev_val = entries[i - 1][1]
                    diff = val - prev_val
                    lines.append(
                        f"{dt.strftime('%d/%m/%y %H:%M')} ‚Äî {val} {unit}\n"
                        f"‚îî‚îÄ –†–∞–∑–Ω–∏—Ü–∞: {diff:+.2f} {unit}"
                    )

            message_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n" + "\n".join(lines)
            if len(message_text) > 4000:
                parts = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
                for part in parts:
                    await message.answer(part)
            else:
                await message.answer(message_text)
        else:
            await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 27: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç =====
# =======================================================

async def show_payment_history(message: Message, counter_type: str):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        entries = []

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_id in data:
                for date_str, items in data[user_id].items():
                    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                    try:
                        dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                    except ValueError:
                        try:
                            dt = datetime.strptime(date_str, "%Y-%m-%d")
                        except ValueError:
                            continue
                    key = f"{counter_type}_–æ–ø–ª–∞—Ç–∞"
                    if key in items:
                        val = items[key]
                        entries.append((dt, val))

        # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –∑–∞–ø–∏—Å–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        last_entries = sorted(entries)[-12:]
        if last_entries:
            lines = [
                f"{dt.strftime('%d/%m/%y %H:%M')} ‚Äî {val} –≥—Ä–Ω"
                for dt, val in last_entries
            ]
            await message.answer("üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç:\n" + "\n".join(lines))
        else:
            await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 28: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è =========
# =======================================================

@dp.message(lambda message: message.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def electricity_payment_history(message: Message):
    await show_payment_history(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 29: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç üíß –í–æ–¥–∞ ==================
# =======================================================

@dp.message(lambda message: message.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≤–æ–¥–∞)")
async def water_payment_history(message: Message):
    await show_payment_history(message, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 30: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç üî• –ì–∞–∑ ===================
# =======================================================

@dp.message(lambda message: message.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≥–∞–∑)")
async def gas_payment_history(message: Message):
    await show_payment_history(message, "–≥–∞–∑")    


# =======================================================
# === üß± –ë–õ–û–ö 31: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ========
# =======================================================

class TariffState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


# =======================================================
# === üß± –ë–õ–û–ö 32: –í–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ==========
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ —Å–≤–µ—Ç")
async def start_electricity_tariff(message: Message, state: FSMContext):
    await state.set_state(TariffState.electricity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é (–≥—Ä–Ω/–∫–í—Ç‚ãÖ—á):")

@dp.message(TariffState.electricity)
async def save_electricity_tariff(message: Message, state: FSMContext):
    await save_tariff(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 33: –í–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ üíß –í–æ–¥–∞ ====================
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≤–æ–¥—É")
async def start_water_tariff(message: Message, state: FSMContext):
    await state.set_state(TariffState.water)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ –≤–æ–¥—É (–≥—Ä–Ω/–º¬≥):")

@dp.message(TariffState.water)
async def save_water_tariff(message: Message, state: FSMContext):
    await save_tariff(message, state, "–≤–æ–¥–∞")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 34: –í–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ üî• –ì–∞–∑ =====================
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≥–∞–∑")
async def start_gas_tariff(message: Message, state: FSMContext):
    await state.set_state(TariffState.gas)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ –≥–∞–∑ (–≥—Ä–Ω/–º¬≥):")

@dp.message(TariffState.gas)
async def save_gas_tariff(message: Message, state: FSMContext):
    await save_tariff(message, state, "–≥–∞–∑")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 35: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ =======
# =======================================================

async def save_tariff(message: Message, state: FSMContext, counter_type: str):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ
        tariff = float(message.text.strip().replace(',', '.'))
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        if user_id not in data:
            data[user_id] = {}
        if "—Ç–∞—Ä–∏—Ñ—ã" not in data[user_id]:
            data[user_id]["—Ç–∞—Ä–∏—Ñ—ã"] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        tariff_key = f"{counter_type}_—Ç–∞—Ä–∏—Ñ"
        data[user_id]["—Ç–∞—Ä–∏—Ñ—ã"][tariff_key] = tariff

        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {tariff} –≥—Ä–Ω")
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 36: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
# =======================================================

@dp.message(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")],
            [KeyboardButton(text="üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã")],
            [KeyboardButton(text="üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 36.1: –ü–æ–¥–º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º ==
# =======================================================

@dp.message(lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def clear_data_menu(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≥–∞–∑)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –∫–∞–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 37: –ü–æ–¥–º–µ–Ω—é ‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ ====
# =======================================================

@dp.message(lambda message: message.text == "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")
async def electricity_settings_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")],
            [KeyboardButton(text="üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é")],
            [KeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ —Å–≤–µ—Ç")],
            [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 38: –ü–æ–¥–º–µ–Ω—é üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã ==============
# =======================================================

@dp.message(lambda message: message.text == "üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã")
async def water_settings_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã")],
            [KeyboardButton(text="üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≤–æ–¥—É")],
            [KeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≤–æ–¥—É")],
            [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 39: –ü–æ–¥–º–µ–Ω—é üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞ ==============
# =======================================================

@dp.message(lambda message: message.text == "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞")
async def gas_settings_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–∞–∑–∞")],
            [KeyboardButton(text="üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≥–∞–∑")],
            [KeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≥–∞–∑")],
            [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≥–∞–∑)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 40: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# =======================================================

class SettingsState(StatesGroup):
    electricity_initial = State()
    electricity_debt = State()
    water_initial = State()
    water_debt = State()
    gas_initial = State()
    gas_debt = State()


# =======================================================
# === üß± –ë–õ–û–ö 40.1: FSM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =======
# =======================================================

class ReminderState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


@dp.message(lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def set_reminder_electricity(message: Message, state: FSMContext):
    await state.set_state(ReminderState.electricity)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n<b>01 08:00</b>")


@dp.message(ReminderState.electricity)
async def save_reminder_electricity(message: Message, state: FSMContext):
    await save_reminder_time(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


@dp.message(lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤–æ–¥–∞)")
async def set_reminder_water(message: Message, state: FSMContext):
    await state.set_state(ReminderState.water)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n<b>01 08:00</b>")


@dp.message(ReminderState.water)
async def save_reminder_water(message: Message, state: FSMContext):
    await save_reminder_time(message, state, "–≤–æ–¥–∞")


@dp.message(lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≥–∞–∑)")
async def set_reminder_gas(message: Message, state: FSMContext):
    await state.set_state(ReminderState.gas)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≥–∞–∑–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n<b>01 08:00</b>")


@dp.message(ReminderState.gas)
async def save_reminder_gas(message: Message, state: FSMContext):
    await save_reminder_time(message, state, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 40.2: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è   (NEW) ======
# =======================================================
#
# ‚Ä¢ –ü—Ä–∏ –∫–∞–∂–¥–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
#   next_try / last_sent, —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å ¬´—á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞¬ª.
# ‚Ä¢ –õ–æ–≥–∏–∫–∞ –≤–≤–æ–¥–∞ (–¥–µ–Ω—å-–≤—Ä–µ–º—è) –Ω–µ –º–µ–Ω—è–ª–∞—Å—å.
#
async def save_reminder_time(message: Message, state: FSMContext, counter_type: str):
    try:
        from datetime import datetime
        from pathlib import Path
        import json

        day_str, time_str = message.text.strip().split()
        day = int(day_str)
        if not (1 <= day <= 31):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–µ–Ω—å")

        datetime.strptime(time_str, "%H:%M")  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM

        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        settings = data.setdefault(user_id, {}).setdefault("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {})

        key = f"{counter_type}_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        cfg = settings.setdefault(key, {})
        cfg["–¥–µ–Ω—å"] = day
        cfg["–≤—Ä–µ–º—è"] = time_str
        # ‚Äî —Å–±—Ä–æ—Å —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π ‚Äî
        cfg.pop("next_try", None)
        cfg.pop("last_sent", None)

        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ¬´{counter_type}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: "
            f"{day} —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ {time_str}"
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n<b>01 08:00</b>"
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    finally:
        await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 41: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è
# =======================================================

@dp.message(lambda message: message.text == "üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")
async def start_electricity_initial(message: Message, state: FSMContext):
    await state.set_state(SettingsState.electricity_initial)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–∫–í—Ç‚ãÖ—á):")

@dp.message(SettingsState.electricity_initial)
async def save_electricity_initial(message: Message, state: FSMContext):
    await save_initial_reading(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 42: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π üíß –í–æ–¥–∞ =========
# =======================================================

@dp.message(lambda message: message.text == "üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã")
async def start_water_initial(message: Message, state: FSMContext):
    await state.set_state(SettingsState.water_initial)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –≤–æ–¥—ã (–º¬≥):")

@dp.message(SettingsState.water_initial)
async def save_water_initial(message: Message, state: FSMContext):
    await save_initial_reading(message, state, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 43: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π üî• –ì–∞–∑ ==========
# =======================================================

@dp.message(lambda message: message.text == "üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–∞–∑–∞")
async def start_gas_initial(message: Message, state: FSMContext):
    await state.set_state(SettingsState.gas_initial)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –≥–∞–∑–∞ (–º¬≥):")

@dp.message(SettingsState.gas_initial)
async def save_gas_initial(message: Message, state: FSMContext):
    await save_initial_reading(message, state, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 44: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ==
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é")
async def start_electricity_debt(message: Message, state: FSMContext):
    await state.set_state(SettingsState.electricity_debt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é (–≥—Ä–Ω):")

@dp.message(SettingsState.electricity_debt)
async def save_electricity_debt(message: Message, state: FSMContext):
    await save_initial_debt(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 45: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ üíß –í–æ–¥–∞ ============
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≤–æ–¥—É")
async def start_water_debt(message: Message, state: FSMContext):
    await state.set_state(SettingsState.water_debt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –∑–∞ –≤–æ–¥—É (–≥—Ä–Ω):")

@dp.message(SettingsState.water_debt)
async def save_water_debt(message: Message, state: FSMContext):
    await save_initial_debt(message, state, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 46: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ üî• –ì–∞–∑ =============
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≥–∞–∑")
async def start_gas_debt(message: Message, state: FSMContext):
    await state.set_state(SettingsState.gas_debt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –∑–∞ –≥–∞–∑ (–≥—Ä–Ω):")

@dp.message(SettingsState.gas_debt)
async def save_gas_debt(message: Message, state: FSMContext):
    await save_initial_debt(message, state, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 47: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π ==========
# =======================================================

async def save_initial_reading(message: Message, state: FSMContext, counter_type: str):
    try:
        value = float(message.text.strip().replace(',', '.'))
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        import json
        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}
        if user_id not in data:
            data[user_id] = {}
        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" not in data[user_id]:
            data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"] = {}
        data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][f"{counter_type}_–ø–æ–∫–∞–∑–∞–Ω–∏—è"] = value
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        await message.answer(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è {counter_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {value}")
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 48: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ =============
# =======================================================

async def save_initial_debt(message: Message, state: FSMContext, counter_type: str):
    try:
        value = float(message.text.strip().replace(',', '.'))
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        import json
        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}
        if user_id not in data:
            data[user_id] = {}
        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" not in data[user_id]:
            data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"] = {}
        data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][f"{counter_type}_–¥–æ–ª–≥"] = value
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        await message.answer(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ {counter_type} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {value} –≥—Ä–Ω")
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 49: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É —Å—á—ë—Ç—á–∏–∫–∞ =======
# =======================================================

@dp.message(lambda message: message.text in [
    "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)",
    "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–¥–∞)",
    "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≥–∞–∑)",
])
async def clear_counter_data(message: Message):
    try:
        mapping = {
            "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)": "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è",
            "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–¥–∞)": "–≤–æ–¥–∞",
            "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≥–∞–∑)": "–≥–∞–∑"
        }
        counter_type = mapping.get(message.text)
        if not counter_type:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞")
            return

        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)

            if user_id in data:
                dates_to_remove = []
                for date, items in data[user_id].items():
                    if isinstance(items, dict) and date not in ["—Ç–∞—Ä–∏—Ñ—ã", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
                        has_counter_data = False

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π, –æ–ø–ª–∞—Ç –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
                        if (counter_type in items or
                            f"{counter_type}_–æ–ø–ª–∞—Ç–∞" in items or
                            ("–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and counter_type in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"])):
                            has_counter_data = True

                        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
                        if has_counter_data and len(items) == 1:
                            dates_to_remove.append(date)
                        elif has_counter_data:
                            items.pop(counter_type, None)
                            items.pop(f"{counter_type}_–æ–ø–ª–∞—Ç–∞", None)
                            if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items:
                                items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"].pop(counter_type, None)
                                if not items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                                    del items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]

                for date in dates_to_remove:
                    del data[user_id][date]

                with open(data_file, "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ '{counter_type}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            else:
                await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 50: –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º ======
# =======================================================

@dp.message(lambda message: message.text == "üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
async def back_to_settings_menu(message: Message):
    await settings_menu_handler(message)


# ==============================================
# === üß± –ë–õ–û–ö 51: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (Webhook)
# ==============================================

import os
import asyncio
from fastapi import FastAPI
from contextlib import asynccontextmanager
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

from config import dp, bot, reminder_background_task  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://yourbot.onrender.com/webhook

@asynccontextmanager
async def lifespan(app: FastAPI):
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(reminder_background_task())
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    yield
    await bot.delete_webhook()
    print("üîª Webhook —É–¥–∞–ª—ë–Ω")

app = FastAPI(lifespan=lifespan)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))


# =======================================================
# === üß± –ë–õ–û–ö 51.1: –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º v2 ===
# =======================================================
#
#  ‚Ä¢ –ù–æ—á–Ω–∞—è ¬´—Ç–∏—à–∏–Ω–∞¬ª 22:00 ‚Äì 08:00 (Europe/Kyiv ¬± user TZ)
#  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 4 —á ‚Üí next_try
#  ‚Ä¢ ¬´–ú—è–≥–∫–æ–µ¬ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è < 2 —Å—É—Ç–æ–∫
#  ‚Ä¢ –°–±—Ä–æ—Å next_try –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π (—Å–º. –±–ª–æ–∫ 14)
#
# –í settings["<—Ä–µ—Å—É—Ä—Å>_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"] —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º:
#   {"–¥–µ–Ω—å": 21, "–≤—Ä–µ–º—è": "17:30", "next_try": "...", "last_sent": "..."}
#
import asyncio
from datetime import datetime, timedelta, time as dtime
from pathlib import Path
import json
from zoneinfo import ZoneInfo
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
BOT = Bot(token=BOT_TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML))

TZ_FALLBACK = ZoneInfo("Europe/Kyiv")
NIGHT_START = 22  # 22:00
NIGHT_END = 8     # 08:00
CHECK_INTERVAL = 60  # —Å–µ–∫

EMOJI = {"—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "‚ö°",
         "–≤–æ–¥–∞": "üíß",
         "–≥–∞–∑": "üî•"}


def is_night(dt: datetime) -> bool:
    """22:00 ‚â§ t < 24:00  or  00:00 ‚â§ t < 08:00."""
    return dt.hour >= NIGHT_START or dt.hour < NIGHT_END


def bump_to_morning(dt: datetime) -> datetime:
    """–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ dt –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 08:00 local morning."""
    if dt.hour >= NIGHT_START:
        dt = (dt + timedelta(days=1)).replace(hour=NIGHT_END, minute=0,
                                              second=0, microsecond=0)
    else:  # —Å—Ä–µ–¥–∏ –Ω–æ—á–∏
        dt = dt.replace(hour=NIGHT_END, minute=0,
                        second=0, microsecond=0)
    return dt


async def reminder_background_task():
    lock = asyncio.Lock()          # –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    data_file = Path("storage/data.json")

    while True:
        try:
            if not data_file.exists():
                await asyncio.sleep(CHECK_INTERVAL)
                continue

            async with lock:
                with open(data_file, "r", encoding="utf-8") as f:
                    data = json.load(f)

            from datetime import UTC                 # –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ import
            now_utc = datetime.now(UTC)              # –æ–±—ä–µ–∫—Ç —Å—Ä–∞–∑—É ¬´aware¬ª
            updated = False

            # ======= –¶–∏–∫–ª –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º =========
            for user_id, user_data in data.items():
                if not isinstance(user_data, dict):
                    continue

                # –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ç–∞—â–∏—Ç—å –¢Z, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏
                user_tz = ZoneInfo(
                    user_data.get("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {}).get("tz", "UTC"))
                if str(user_tz) == "UTC":
                    user_tz = TZ_FALLBACK

                now = now_utc.astimezone(user_tz)
                current_day = now.day

                settings = user_data.setdefault("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {})
                for resource in ("—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–≤–æ–¥–∞", "–≥–∞–∑"):
                    cfg = settings.get(f"{resource}_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                    if not cfg or not isinstance(cfg, dict):
                        continue

                    # --- –ø–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ ---
                    if cfg.get("–¥–µ–Ω—å") != current_day:
                        continue

                    try:
                        hh, mm = map(int, cfg["–≤—Ä–µ–º—è"].split(":"))
                        plan_dt = now.replace(hour=hh, minute=mm,
                                              second=0, microsecond=0)
                    except Exception:
                        continue  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ ¬´–≤—Ä–µ–º—è¬ª

                    # --- —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç ---
                    next_try = None
                    if "next_try" in cfg:
                        try:
                            next_try = datetime.fromisoformat(
                                cfg["next_try"]).astimezone(user_tz)
                        except ValueError:
                            cfg.pop("next_try", None)

                    # due_to_send? ------------------------------------------------
                    due = False
                    if next_try:
                        if now >= next_try:
                            due = True
                    else:  # –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
                        if abs((now - plan_dt).total_seconds()) <= 120:
                            due = True

                    if not due:
                        continue

                    # –Ω–æ—á–Ω–æ–µ –æ–∫–Ω–æ? –ø–µ—Ä–µ–Ω–æ—Å–∏–º, –Ω–æ –ø–∏—à–µ–º next_try
                    if is_night(now):
                        cfg["next_try"] = bump_to_morning(now).isoformat()
                        updated = True
                        continue

                    # ¬´–º—è–≥–∫–æ–µ¬ª? –∏—â–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è
                    last_read_dt = None
                    for date_str in sorted(user_data.keys(), reverse=True):
                        if date_str in ("—Ç–∞—Ä–∏—Ñ—ã", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                            continue
                        if resource in user_data[date_str]:
                            try:
                                last_read_dt = datetime.strptime(
                                    date_str, "%Y-%m-%d %H:%M:%S")
                            except ValueError:
                                try:
                                    last_read_dt = datetime.strptime(
                                        date_str, "%Y-%m-%d")
                                except ValueError:
                                    pass
                            break

                    soft = (last_read_dt and
                            (now - last_read_dt).days < 2)

                    if soft:
                        msg = (f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                               f"{EMOJI[resource]} –í—ã –≤–Ω–æ—Å–∏–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è "
                               f"<b>{last_read_dt.strftime('%d.%m.%Y %H:%M')}</b>.\n"
                               f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.")
                    else:
                        msg = (f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                               f"{EMOJI[resource]} –ü–æ—Ä–∞ –≤–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è "
                               f"–∑–∞ <b>{resource}</b>.")

                    # --- –æ—Ç–ø—Ä–∞–≤–∫–∞ ---------------------------------------------
                    try:
                        await BOT.send_message(int(user_id), msg)
                    except Exception as e:
                        print(f"‚ùå send_message {user_id}: {e}")

                    # --- –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è ----------------------------
                    cfg["last_sent"] = now.isoformat()
                    nxt = now + timedelta(hours=4)
                    if is_night(nxt):
                        nxt = bump_to_morning(nxt)
                    cfg["next_try"] = nxt.isoformat()
                    updated = True

            # ======= –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö =========
            if updated:
                async with lock:
                    with open(data_file, "w", encoding="utf-8") as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)

        except Exception as e:
            print(f"‚ö†Ô∏è reminder_background_task: {e}")

        await asyncio.sleep(CHECK_INTERVAL)




if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
