from keep_alive import keep_alive
keep_alive()


# =======================================================
# === üß± –ë–õ–û–ö 1: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ========
# =======================================================

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import config


# =======================================================
# === üß± –ë–õ–û–ö 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ========
# =======================================================

bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())


# =======================================================
# === üß± –ë–õ–û–ö 3: –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==========
# =======================================================


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

@dp.message(Command("start"))
async def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")],
            [KeyboardButton(text="üî• –ì–∞–∑")],
            [KeyboardButton(text="üíß –í–æ–¥–∞")],
            [KeyboardButton(text="üìä –û–±—â–∏–π –¥–æ–ª–≥ / –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, —è –î–æ–º–æ–≤—ë–Ω–æ–∫ –ö—É–∑—è!\n\n"
        "–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ —Ç–≤–æ–µ–º —Å—É–Ω–¥—É–∫–µ —Å–æ —Å–∫–∞–∑–∫–∞–º–∏ ‚Äî              –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –∑–∞—à–µ–ª –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ –∑–∞–≥–ª—è–Ω–∏ –≤ ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> –∏ —É—Å—Ç–∞–Ω–æ–≤–∏         —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏ —Å—É–º–º—É –¥–æ–ª–≥–∞ (–∏–ª–∏ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã).\n\n"
        "üßÆ –ê —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —á—Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )



# =======================================================
# === üß± –ë–õ–û–ö 4: –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π ===
# =======================================================

@dp.message(Command("add"))
async def add_handler(message: Message):
    try:
        from datetime import datetime
        import json
        from pathlib import Path

        # –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /add –≤–æ–¥–∞ 23.7
        parts = message.text.strip().split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /add <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–∏–µ>")

        counter_type = parts[1].lower()
        value = float(parts[2])
        user_id = str(message.from_user.id)
        today = datetime.now().strftime("%Y-%m-%d")

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
        data_file = Path("storage/data.json")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if user_id not in data:
            data[user_id] = {}
        if today not in data[user_id]:
            data[user_id][today] = {}
        data[user_id][today][counter_type] = value

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {counter_type} = {value}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 5: –ú–µ–Ω—é ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =====
# =======================================================

@dp.message(lambda message: message.text == "‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
async def electricity_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ —Å–≤–µ—Ç")],
            [KeyboardButton(text="üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 6: –ú–µ–Ω—é üíß –í–æ–¥–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ==============
# =======================================================

@dp.message(lambda message: message.text == "üíß –í–æ–¥–∞")
async def water_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≤–æ–¥—É")],
            [KeyboardButton(text="üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–†–∞–∑–¥–µ–ª üíß –í–æ–¥–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 7: –ú–µ–Ω—é üî• –ì–∞–∑ ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===============
# =======================================================

@dp.message(lambda message: message.text == "üî• –ì–∞–∑")
async def gas_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≥–∞–∑)")],
            [KeyboardButton(text="üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≥–∞–∑)")],
            [KeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≥–∞–∑")],
            [KeyboardButton(text="üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≥–∞–∑)")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≥–∞–∑)")],
            [KeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≥–∞–∑)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–†–∞–∑–¥–µ–ª üî• –ì–∞–∑.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 8: üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç) =====
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π")
async def electricity_history(message: Message):
    await show_history(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–∫–í—Ç‚ãÖ—á")


# =======================================================
# === üß± –ë–õ–û–ö 9: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π ======
# =======================================================

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime
import json
from pathlib import Path

class ReadingState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


# =======================================================
# === üß± –ë–õ–û–ö 9.1: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ===
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def electricity_history_named(message: Message):
    await show_history(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–∫–í—Ç‚ãÖ—á")


# =======================================================
# === üß± –ë–õ–û–ö 9.2: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π üíß –í–æ–¥–∞ =============
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≤–æ–¥–∞)")
async def water_history(message: Message):
    await show_history(message, "–≤–æ–¥–∞", "–º¬≥")


# =======================================================
# === üß± –ë–õ–û–ö 9.3: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π üî• –ì–∞–∑ ==============
# =======================================================

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–≥–∞–∑)")
async def gas_history(message: Message):
    await show_history(message, "–≥–∞–∑", "–º¬≥")


# =======================================================
# === üß± –ë–õ–û–ö 10: –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ =======
# =======================================================

@dp.message(lambda message: message.text == "‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def start_electricity_reading(message: Message, state: FSMContext):
    await state.set_state(ReadingState.electricity)
    last = get_last_value(message.from_user.id, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    msg = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–∫–í—Ç‚ãÖ—á):"
    if last is not None:
        msg += f"\n_(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ: {last})_"
    await message.answer(msg, parse_mode="Markdown")

@dp.message(ReadingState.electricity)
async def save_electricity_reading(message: Message, state: FSMContext):
    await save_reading(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 11: –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π üíß –í–æ–¥—ã ================
# =======================================================

@dp.message(lambda message: message.text == "‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≤–æ–¥–∞)")
async def start_water_reading(message: Message, state: FSMContext):
    await state.set_state(ReadingState.water)
    last = get_last_value(message.from_user.id, "–≤–æ–¥–∞")
    msg = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –≤–æ–¥–µ (–º¬≥):"
    if last is not None:
        msg += f"\n_(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ: {last})_"
    await message.answer(msg, parse_mode="Markdown")

@dp.message(ReadingState.water)
async def save_water_reading(message: Message, state: FSMContext):
    await save_reading(message, state, "–≤–æ–¥–∞")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 12: –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π üî• –ì–∞–∑–∞ ================
# =======================================================

@dp.message(lambda message: message.text == "‚ûï –í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–≥–∞–∑)")
async def start_gas_reading(message: Message, state: FSMContext):
    await state.set_state(ReadingState.gas)
    last = get_last_value(message.from_user.id, "–≥–∞–∑")
    msg = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –≥–∞–∑—É (–º¬≥):"
    if last is not None:
        msg += f"\n_(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ: {last})_"
    await message.answer(msg, parse_mode="Markdown")

@dp.message(ReadingState.gas)
async def save_gas_reading(message: Message, state: FSMContext):
    await save_reading(message, state, "–≥–∞–∑")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 13: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö =
# =======================================================

async def cleanup_old_records(user_id: str):
    data_file = Path("storage/data.json")
    if not data_file.exists():
        return

    try:
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)

        if user_id not in data:
            return

        user_data = data[user_id]
        settings = user_data.get("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        tariffs = user_data.get("—Ç–∞—Ä–∏—Ñ—ã", {})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ—ã

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
        entries = [(date, items) for date, items in user_data.items() 
                  if isinstance(items, dict) and date not in ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "—Ç–∞—Ä–∏—Ñ—ã"]]
        entries.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user_data = {
            "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏": settings,
            "—Ç–∞—Ä–∏—Ñ—ã": tariffs
        }

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –∑–∞–ø–∏—Å–µ–π
        for date, items in entries[:12]:
            new_user_data[date] = items

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data[user_id] = new_user_data

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 14: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–∞ ====
# =======================================================

async def save_reading(message: Message, state: FSMContext, counter_type: str):
    try:
        value = float(message.text.strip().replace(',', '.'))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π
        user_id = str(message.from_user.id)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data_file = Path("storage/data.json")

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        if user_id not in data:
            data[user_id] = {}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º now –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á (–¥–∞—Ç–∞+–≤—Ä–µ–º—è)
        data[user_id][now] = {}

        # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        prev_value = get_last_value(user_id, counter_type) or 0
        data[user_id][now][counter_type] = value
        usage = value - prev_value if prev_value else 0

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        tariff_key = f"{counter_type}_—Ç–∞—Ä–∏—Ñ"
        tariff = data[user_id].get("—Ç–∞—Ä–∏—Ñ—ã", {}).get(tariff_key, 1.8)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.8
        cost = usage * tariff

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
        if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" not in data[user_id][now]:
            data[user_id][now]["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"] = {}
        data[user_id][now]["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"][counter_type] = cost

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        await cleanup_old_records(user_id)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(
            f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {value}\n"
            f"üìä –†–∞—Å—Ö–æ–¥: {usage:.2f} ‚Ä¢ –°—É–º–º–∞: {cost:.2f} –≥—Ä–Ω"
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 15: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π ==========
# =======================================================

def get_last_value(user_id, counter_type):
    user_id = str(user_id)
    data_file = Path("storage/data.json")
    if data_file.exists():
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        if user_id in data:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π
            dates = sorted([d for d in data[user_id].keys() 
                          if isinstance(data[user_id][d], dict) and 
                          counter_type in data[user_id][d]], reverse=True)
            if dates:
                return data[user_id][dates[0]][counter_type]

            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
            if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
                initial_key = f"{counter_type}_–ø–æ–∫–∞–∑–∞–Ω–∏—è"
                if initial_key in data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
                    return data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][initial_key]
    return None


# =======================================================
# === üß± –ë–õ–û–ö 16: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã =====
# =======================================================

class PaymentState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


# =======================================================
# === üß± –ë–õ–û–ö 17: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ =====
# =======================================================

@dp.message(lambda message: message.text == "üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def start_electricity_payment(message: Message, state: FSMContext):
    await state.set_state(PaymentState.electricity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é (–≥—Ä–Ω):")

@dp.message(PaymentState.electricity)
async def save_electricity_payment(message: Message, state: FSMContext):
    await save_payment(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 18: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã üíß –í–æ–¥—ã ===============
# =======================================================

@dp.message(lambda message: message.text == "üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≤–æ–¥–∞)")
async def start_water_payment(message: Message, state: FSMContext):
    await state.set_state(PaymentState.water)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ –≤–æ–¥—É (–≥—Ä–Ω):")

@dp.message(PaymentState.water)
async def save_water_payment(message: Message, state: FSMContext):
    await save_payment(message, state, "–≤–æ–¥–∞")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 19: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã üî• –ì–∞–∑–∞ ===============
# =======================================================

@dp.message(lambda message: message.text == "üí∏ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É (–≥–∞–∑)")
async def start_gas_payment(message: Message, state: FSMContext):
    await state.set_state(PaymentState.gas)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ –≥–∞–∑ (–≥—Ä–Ω):")

@dp.message(PaymentState.gas)
async def save_gas_payment(message: Message, state: FSMContext):
    await save_payment(message, state, "–≥–∞–∑")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 20: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã =======
# =======================================================

async def save_payment(message: Message, state: FSMContext, counter_type: str):
    try:
        amount = float(message.text.strip().replace(',', '.'))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π
        user_id = str(message.from_user.id)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        file_path = Path("storage/data.json")

        if file_path.exists():
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        if user_id not in data:
            data[user_id] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–ª–∞—Ç—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        data[user_id][now] = {
            f"{counter_type}_–æ–ø–ª–∞—Ç–∞": amount
        }

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        await cleanup_old_records(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        total = 0.0
        paid = 0.0
        initial_debt = 0.0

        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
            initial_debt = float(data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"].get(f"{counter_type}_–¥–æ–ª–≥", 0))

        for date, items in data[user_id].items():
            if isinstance(items, dict):
                if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and counter_type in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                    total += float(items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"][counter_type])
                payment_key = f"{counter_type}_–æ–ø–ª–∞—Ç–∞"
                if payment_key in items:
                    paid += float(items[payment_key])

        total += initial_debt
        remaining_debt = total - paid

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        message_text = [
            f"üí∏ –û–ø–ª–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {amount:.2f} –≥—Ä–Ω",
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {remaining_debt:.2f} –≥—Ä–Ω"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if remaining_debt > 0:
            message_text.append("‚ùó –ï—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å")
        elif remaining_debt < 0:
            message_text.append("üí´ –ï—Å—Ç—å –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")
        else:
            message_text.append("‚úÖ –î–æ–ª–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω")

        await message.answer("\n".join(message_text))
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 21: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–∞ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è =======
# =======================================================

@dp.message(lambda message: message.text == "üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def view_debt_electricity(message: Message):
    await show_debt(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 22: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–∞ üíß –í–æ–¥–∞ ================
# =======================================================

@dp.message(lambda message: message.text == "üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≤–æ–¥–∞)")
async def view_debt_water(message: Message):
    await show_debt(message, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 23: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ª–≥–∞ üî• –ì–∞–∑ =================
# =======================================================

@dp.message(lambda message: message.text == "üìâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥ (–≥–∞–∑)")
async def view_debt_gas(message: Message):
    await show_debt(message, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 23.1: –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–≥–æ –¥–æ–ª–≥–∞ / –ø–µ—Ä–µ–ø–ª–∞—Ç—ã ===
# =======================================================

@dp.message(lambda message: message.text == "üìä –û–±—â–∏–π –¥–æ–ª–≥ / –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")
async def view_total_balance(message: Message):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        if not data_file.exists():
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)

        if user_id not in data:
            await message.answer("üì≠ –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        resources = {
            "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è",
            "–≤–æ–¥–∞": "üíß –í–æ–¥–∞",
            "–≥–∞–∑": "üî• –ì–∞–∑"
        }

        lines = []
        total_balance = 0.0

        for key, label in resources.items():
            total = 0.0
            paid = 0.0
            initial_debt = 0.0

            user_data = data[user_id]

            if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in user_data:
                initial_debt = float(user_data["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"].get(f"{key}_–¥–æ–ª–≥", 0))

            for date, items in user_data.items():
                if isinstance(items, dict):
                    if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and key in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                        total += float(items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"][key])
                    payment_key = f"{key}_–æ–ø–ª–∞—Ç–∞"
                    if payment_key in items:
                        paid += float(items[payment_key])

            balance = initial_debt + total - paid
            total_balance += balance

            if balance > 0:
                lines.append(f"{label} ‚Äî –¥–æ–ª–≥: {balance:.2f} –≥—Ä–Ω ‚ùó")
            elif balance < 0:
                lines.append(f"{label} ‚Äî –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: {abs(balance):.2f} –≥—Ä–Ω üí´")
            else:
                lines.append(f"{label} ‚Äî –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ ‚úÖ")

        lines.append("")
        if total_balance > 0:
            lines.append(f"üßÆ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{total_balance:.2f} –≥—Ä–Ω</b>")
        elif total_balance < 0:
            lines.append(f"üßÆ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: <b>{abs(total_balance):.2f} –≥—Ä–Ω</b>")
        else:
            lines.append(f"üßÆ –í—Å—ë –æ–ø–ª–∞—á–µ–Ω–æ: <b>0.00 –≥—Ä–Ω</b> ‚úÖ")

        await message.answer("\n".join(lines))
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 24: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ–ª–≥–∞ ===========
# =======================================================

async def show_debt(message: Message, counter_type: str):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        total = 0.0
        paid = 0.0
        initial_debt = 0.0

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_id in data:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
                    initial_debt = float(data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"].get(f"{counter_type}_–¥–æ–ª–≥", 0))

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã
                for date, items in data[user_id].items():
                    if isinstance(items, dict):
                        # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
                        if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and counter_type in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                            total += float(items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"][counter_type])

                        # –£—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—ã
                        payment_key = f"{counter_type}_–æ–ø–ª–∞—Ç–∞"
                        if payment_key in items:
                            paid += float(items[payment_key])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∫ –æ–±—â–µ–π —Å—É–º–º–µ
        total += initial_debt
        debt = total - paid

        await message.answer(
            f"üìâ <b>{counter_type.capitalize()}</b>:\n"
            f"–ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥: {initial_debt:.2f} –≥—Ä–Ω\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {(total - initial_debt):.2f} –≥—Ä–Ω\n"
            f"–û–ø–ª–∞—á–µ–Ω–æ: {paid:.2f} –≥—Ä–Ω\n"
            f"–ò—Ç–æ–≥–æ–≤—ã–π –¥–æ–ª–≥: <b>{debt:.2f} –≥—Ä–Ω</b>"
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ–ª–≥–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 25: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ======
# =======================================================

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")],
            [KeyboardButton(text="üî• –ì–∞–∑")],
            [KeyboardButton(text="üíß –í–æ–¥–∞")],
            [KeyboardButton(text="üìä –û–±—â–∏–π –¥–æ–ª–≥ / –ø–µ—Ä–µ–ø–ª–∞—Ç–∞")],
            [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

# ===========================================================
# === üß± –ë–õ–û–ö 26: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π ===
# ===========================================================

async def show_history(message: Message, counter_type: str, unit: str):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        entries = []
        initial_reading = None

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_id in data:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ
                if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in data[user_id]:
                    initial_key = f"{counter_type}_–ø–æ–∫–∞–∑–∞–Ω–∏—è"
                    if initial_key in data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
                        initial_reading = float(data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][initial_key])
                        initial_date = datetime.min  # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                        entries.append((initial_date, initial_reading))

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
                for date_str, items in data[user_id].items():
                    if isinstance(items, dict) and counter_type in items:
                        try:
                            dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                        except ValueError:
                            try:
                                dt = datetime.strptime(date_str, "%Y-%m-%d")
                            except ValueError:
                                continue
                        val = float(items[counter_type])
                        entries.append((dt, val))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
        entries.sort()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏
        if entries:
            lines = []
            if initial_reading is not None:
                lines.append(f"üìå –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {initial_reading} {unit}")

            for i in range(len(entries)):
                dt, val = entries[i]
                if dt == datetime.min:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
                    continue

                # –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–æ–∫–∞–∑–∞–Ω–∏–µ–º
                prev_val = entries[i-1][1] if i > 0 else initial_reading or val
                diff = val - prev_val

                lines.append(
                    f"{dt.strftime('%d/%m/%y %H:%M')} ‚Äî {val} {unit}\n"
                    f"‚îî‚îÄ –†–∞–∑–Ω–∏—Ü–∞: {diff:+.2f} {unit}"
                )

            message_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n" + "\n".join(lines)
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if len(message_text) > 4000:
                parts = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
                for part in parts:
                    await message.answer(part)
            else:
                await message.answer(message_text)
        else:
            await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 27: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç =====
# =======================================================

async def show_payment_history(message: Message, counter_type: str):
    try:
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        entries = []

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_id in data:
                for date_str, items in data[user_id].items():
                    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                    try:
                        dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                    except ValueError:
                        try:
                            dt = datetime.strptime(date_str, "%Y-%m-%d")
                        except ValueError:
                            continue
                    key = f"{counter_type}_–æ–ø–ª–∞—Ç–∞"
                    if key in items:
                        val = items[key]
                        entries.append((dt, val))

        # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –∑–∞–ø–∏—Å–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        last_entries = sorted(entries)[-12:]
        if last_entries:
            lines = [
                f"{dt.strftime('%d/%m/%y %H:%M')} ‚Äî {val} –≥—Ä–Ω"
                for dt, val in last_entries
            ]
            await message.answer("üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç:\n" + "\n".join(lines))
        else:
            await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 28: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è =========
# =======================================================

@dp.message(lambda message: message.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def electricity_payment_history(message: Message):
    await show_payment_history(message, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 29: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç üíß –í–æ–¥–∞ ==================
# =======================================================

@dp.message(lambda message: message.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≤–æ–¥–∞)")
async def water_payment_history(message: Message):
    await show_payment_history(message, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 30: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç üî• –ì–∞–∑ ===================
# =======================================================

@dp.message(lambda message: message.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç (–≥–∞–∑)")
async def gas_payment_history(message: Message):
    await show_payment_history(message, "–≥–∞–∑")    


# =======================================================
# === üß± –ë–õ–û–ö 31: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ========
# =======================================================

class TariffState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


# =======================================================
# === üß± –ë–õ–û–ö 32: –í–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ==========
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ —Å–≤–µ—Ç")
async def start_electricity_tariff(message: Message, state: FSMContext):
    await state.set_state(TariffState.electricity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é (–≥—Ä–Ω/–∫–í—Ç‚ãÖ—á):")

@dp.message(TariffState.electricity)
async def save_electricity_tariff(message: Message, state: FSMContext):
    await save_tariff(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 33: –í–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ üíß –í–æ–¥–∞ ====================
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≤–æ–¥—É")
async def start_water_tariff(message: Message, state: FSMContext):
    await state.set_state(TariffState.water)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ –≤–æ–¥—É (–≥—Ä–Ω/–º¬≥):")

@dp.message(TariffState.water)
async def save_water_tariff(message: Message, state: FSMContext):
    await save_tariff(message, state, "–≤–æ–¥–∞")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 34: –í–≤–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ üî• –ì–∞–∑ =====================
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–≤–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –≥–∞–∑")
async def start_gas_tariff(message: Message, state: FSMContext):
    await state.set_state(TariffState.gas)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ –≥–∞–∑ (–≥—Ä–Ω/–º¬≥):")

@dp.message(TariffState.gas)
async def save_gas_tariff(message: Message, state: FSMContext):
    await save_tariff(message, state, "–≥–∞–∑")
    await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 35: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ =======
# =======================================================

async def save_tariff(message: Message, state: FSMContext, counter_type: str):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ
        tariff = float(message.text.strip().replace(',', '.'))
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        if user_id not in data:
            data[user_id] = {}
        if "—Ç–∞—Ä–∏—Ñ—ã" not in data[user_id]:
            data[user_id]["—Ç–∞—Ä–∏—Ñ—ã"] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        tariff_key = f"{counter_type}_—Ç–∞—Ä–∏—Ñ"
        data[user_id]["—Ç–∞—Ä–∏—Ñ—ã"][tariff_key] = tariff

        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {tariff} –≥—Ä–Ω")
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 36: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
# =======================================================

@dp.message(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")],
            [KeyboardButton(text="üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã")],
            [KeyboardButton(text="üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 36.1: –ü–æ–¥–º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º ==
# =======================================================

@dp.message(lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def clear_data_menu(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≥–∞–∑)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –∫–∞–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 37: –ü–æ–¥–º–µ–Ω—é ‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ ====
# =======================================================

@dp.message(lambda message: message.text == "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")
async def electricity_settings_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")],
            [KeyboardButton(text="üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é")],
            [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 38: –ü–æ–¥–º–µ–Ω—é üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã ==============
# =======================================================

@dp.message(lambda message: message.text == "üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã")
async def water_settings_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã")],
            [KeyboardButton(text="üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≤–æ–¥—É")],
            [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤–æ–¥–∞)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 39: –ü–æ–¥–º–µ–Ω—é üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞ ==============
# =======================================================

@dp.message(lambda message: message.text == "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞")
async def gas_settings_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–∞–∑–∞")],
            [KeyboardButton(text="üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≥–∞–∑")],
            [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≥–∞–∑)")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# =======================================================
# === üß± –ë–õ–û–ö 40: FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# =======================================================

class SettingsState(StatesGroup):
    electricity_initial = State()
    electricity_debt = State()
    water_initial = State()
    water_debt = State()
    gas_initial = State()
    gas_debt = State()


# =======================================================
# === üß± –ë–õ–û–ö 40.1: FSM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =======
# =======================================================

class ReminderState(StatesGroup):
    electricity = State()
    water = State()
    gas = State()


@dp.message(lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)")
async def set_reminder_electricity(message: Message, state: FSMContext):
    await state.set_state(ReminderState.electricity)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n<b>20 08:00</b>")


@dp.message(ReminderState.electricity)
async def save_reminder_electricity(message: Message, state: FSMContext):
    await save_reminder_time(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


@dp.message(lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤–æ–¥–∞)")
async def set_reminder_water(message: Message, state: FSMContext):
    await state.set_state(ReminderState.water)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n<b>20 08:00</b>")


@dp.message(ReminderState.water)
async def save_reminder_water(message: Message, state: FSMContext):
    await save_reminder_time(message, state, "–≤–æ–¥–∞")


@dp.message(lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≥–∞–∑)")
async def set_reminder_gas(message: Message, state: FSMContext):
    await state.set_state(ReminderState.gas)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≥–∞–∑–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n<b>20 08:00</b>")


@dp.message(ReminderState.gas)
async def save_reminder_gas(message: Message, state: FSMContext):
    await save_reminder_time(message, state, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 40.2: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ==
# =======================================================

async def save_reminder_time(message: Message, state: FSMContext, counter_type: str):
    try:
        from datetime import datetime
        import json
        from pathlib import Path

        input_text = message.text.strip()
        parts = input_text.split()

        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

        day_str, time_str = parts
        day = int(day_str)
        if not (1 <= day <= 31):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(time_str, "%H:%M")

        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        if user_id not in data:
            data[user_id] = {}
        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" not in data[user_id]:
            data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"] = {}

        key = f"{counter_type}_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][key] = {
            "–¥–µ–Ω—å": day,
            "–≤—Ä–µ–º—è": time_str
        }

        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ¬´{counter_type}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {day} —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ {time_str}")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<b>20 08:00</b>")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    finally:
        await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 41: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è
# =======================================================

@dp.message(lambda message: message.text == "üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")
async def start_electricity_initial(message: Message, state: FSMContext):
    await state.set_state(SettingsState.electricity_initial)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–∫–í—Ç‚ãÖ—á):")

@dp.message(SettingsState.electricity_initial)
async def save_electricity_initial(message: Message, state: FSMContext):
    await save_initial_reading(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 42: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π üíß –í–æ–¥–∞ =========
# =======================================================

@dp.message(lambda message: message.text == "üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã")
async def start_water_initial(message: Message, state: FSMContext):
    await state.set_state(SettingsState.water_initial)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –≤–æ–¥—ã (–º¬≥):")

@dp.message(SettingsState.water_initial)
async def save_water_initial(message: Message, state: FSMContext):
    await save_initial_reading(message, state, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 43: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π üî• –ì–∞–∑ ==========
# =======================================================

@dp.message(lambda message: message.text == "üìù –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–∞–∑–∞")
async def start_gas_initial(message: Message, state: FSMContext):
    await state.set_state(SettingsState.gas_initial)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –≥–∞–∑–∞ (–º¬≥):")

@dp.message(SettingsState.gas_initial)
async def save_gas_initial(message: Message, state: FSMContext):
    await save_initial_reading(message, state, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 44: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ==
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é")
async def start_electricity_debt(message: Message, state: FSMContext):
    await state.set_state(SettingsState.electricity_debt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é (–≥—Ä–Ω):")

@dp.message(SettingsState.electricity_debt)
async def save_electricity_debt(message: Message, state: FSMContext):
    await save_initial_debt(message, state, "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")


# =======================================================
# === üß± –ë–õ–û–ö 45: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ üíß –í–æ–¥–∞ ============
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≤–æ–¥—É")
async def start_water_debt(message: Message, state: FSMContext):
    await state.set_state(SettingsState.water_debt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –∑–∞ –≤–æ–¥—É (–≥—Ä–Ω):")

@dp.message(SettingsState.water_debt)
async def save_water_debt(message: Message, state: FSMContext):
    await save_initial_debt(message, state, "–≤–æ–¥–∞")


# =======================================================
# === üß± –ë–õ–û–ö 46: –í–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ üî• –ì–∞–∑ =============
# =======================================================

@dp.message(lambda message: message.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ –≥–∞–∑")
async def start_gas_debt(message: Message, state: FSMContext):
    await state.set_state(SettingsState.gas_debt)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –∑–∞ –≥–∞–∑ (–≥—Ä–Ω):")

@dp.message(SettingsState.gas_debt)
async def save_gas_debt(message: Message, state: FSMContext):
    await save_initial_debt(message, state, "–≥–∞–∑")


# =======================================================
# === üß± –ë–õ–û–ö 47: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π ==========
# =======================================================

async def save_initial_reading(message: Message, state: FSMContext, counter_type: str):
    try:
        value = float(message.text.strip().replace(',', '.'))
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        import json
        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}
        if user_id not in data:
            data[user_id] = {}
        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" not in data[user_id]:
            data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"] = {}
        data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][f"{counter_type}_–ø–æ–∫–∞–∑–∞–Ω–∏—è"] = value
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        await message.answer(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è {counter_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {value}")
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 48: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ =============
# =======================================================

async def save_initial_debt(message: Message, state: FSMContext, counter_type: str):
    try:
        value = float(message.text.strip().replace(',', '.'))
        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")
        import json
        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}
        if user_id not in data:
            data[user_id] = {}
        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" not in data[user_id]:
            data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"] = {}
        data[user_id]["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"][f"{counter_type}_–¥–æ–ª–≥"] = value
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        await message.answer(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ–ª–≥ –∑–∞ {counter_type} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {value} –≥—Ä–Ω")
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


# =======================================================
# === üß± –ë–õ–û–ö 49: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É —Å—á—ë—Ç—á–∏–∫–∞ =======
# =======================================================

@dp.message(lambda message: message.text in [
    "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)",
    "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–¥–∞)",
    "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≥–∞–∑)",
])
async def clear_counter_data(message: Message):
    try:
        mapping = {
            "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è)": "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è",
            "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–¥–∞)": "–≤–æ–¥–∞",
            "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≥–∞–∑)": "–≥–∞–∑"
        }
        counter_type = mapping.get(message.text)
        if not counter_type:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞")
            return

        user_id = str(message.from_user.id)
        data_file = Path("storage/data.json")

        if data_file.exists():
            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)

            if user_id in data:
                dates_to_remove = []
                for date, items in data[user_id].items():
                    if isinstance(items, dict) and date not in ["—Ç–∞—Ä–∏—Ñ—ã", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
                        has_counter_data = False

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π, –æ–ø–ª–∞—Ç –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
                        if (counter_type in items or
                            f"{counter_type}_–æ–ø–ª–∞—Ç–∞" in items or
                            ("–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items and counter_type in items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"])):
                            has_counter_data = True

                        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
                        if has_counter_data and len(items) == 1:
                            dates_to_remove.append(date)
                        elif has_counter_data:
                            items.pop(counter_type, None)
                            items.pop(f"{counter_type}_–æ–ø–ª–∞—Ç–∞", None)
                            if "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in items:
                                items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"].pop(counter_type, None)
                                if not items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]:
                                    del items["–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]

                for date in dates_to_remove:
                    del data[user_id][date]

                with open(data_file, "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ '{counter_type}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            else:
                await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


# =======================================================
# === üß± –ë–õ–û–ö 50: –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º ======
# =======================================================

@dp.message(lambda message: message.text == "üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
async def back_to_settings_menu(message: Message):
    await settings_menu_handler(message)


# ===================================
# === üß± –ë–õ–û–ö 51: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========
# ===================================

async def main():
    try:
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç @{me.username} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        asyncio.create_task(reminder_background_task())
        await dp.start_polling(bot)

    except asyncio.CancelledError:
        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã asyncio. –ó–∞–≤–µ—Ä—à–∞–µ–º...")

    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")

    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    finally:
        print("üîÅ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")


# =======================================================
# === üß± –ë–õ–û–ö 51.1: –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º ======
# =======================================================

async def reminder_background_task():
    from datetime import datetime, timedelta
    import json
    from pathlib import Path

    CHECK_INTERVAL = 7200  # –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞

    while True:
        try:
            data_file = Path("storage/data.json")
            if not data_file.exists():
                await asyncio.sleep(CHECK_INTERVAL)
                continue

            with open(data_file, "r", encoding="utf-8") as f:
                data = json.load(f)

            now = datetime.now()
            current_day = now.day
            current_time = now.strftime("%H:%M")

            updated = False  # —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å JSON –±–µ–∑ –Ω—É–∂–¥—ã

            for user_id, user_data in data.items():
                if not isinstance(user_data, dict):
                    continue

                settings = user_data.setdefault("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {})
                sent_flags = settings.setdefault("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", {})

                for resource in ["—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–≤–æ–¥–∞", "–≥–∞–∑"]:
                    reminder_key = f"{resource}_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                    if reminder_key not in settings:
                        continue

                    reminder_config = settings.get(reminder_key)
                    if not isinstance(reminder_config, dict):
                        continue  # —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç

                    if (
                        reminder_config.get("–¥–µ–Ω—å") != current_day or
                        reminder_config.get("–≤—Ä–µ–º—è") != current_time
                    ):
                        continue  # –Ω–µ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    last_sent_str = sent_flags.get(resource)
                    last_sent_dt = None
                    if last_sent_str:
                        try:
                            last_sent_dt = datetime.strptime(last_sent_str, "%Y-%m-%d %H:%M")
                        except ValueError:
                            pass

                    if last_sent_dt and (now - last_sent_dt).days < 5:
                        continue  # —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ

                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
                    last_date = None
                    for date_str in sorted(user_data.keys(), reverse=True):
                        if date_str in ["—Ç–∞—Ä–∏—Ñ—ã", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
                            continue
                        if resource in user_data[date_str]:
                            try:
                                last_date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                            except ValueError:
                                try:
                                    last_date = datetime.strptime(date_str, "%Y-%m-%d")
                                except ValueError:
                                    continue
                            break

                    if not last_date or (now - last_date).days >= 2:
                        try:
                            from config import BOT_TOKEN
                            from aiogram import Bot
                            bot = Bot(token=BOT_TOKEN, parse_mode="HTML")

                            emojis = {
                                "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "‚ö°",
                                "–≤–æ–¥–∞": "üíß",
                                "–≥–∞–∑": "üî•"
                            }

                            text = (
                                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                                f"{emojis[resource]} –ü–æ—Ä–∞ –≤–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ <b>{resource}</b>.\n"
                                f"–ï—Å–ª–∏ —É–∂–µ –≤–Ω–µ—Å–ª–∏ ‚Äî —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç."
                            )
                            await bot.send_message(chat_id=user_id, text=text)

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥
                            sent_flags[resource] = now.strftime("%Y-%m-%d %H:%M")
                            updated = True
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            if updated:
                with open(data_file, "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")

        await asyncio.sleep(CHECK_INTERVAL)





if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ main()
